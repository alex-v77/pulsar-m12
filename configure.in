dnl Pulsar autoconf file
dnl --------------------
AC_INIT(./src/pulsar.c)

dnl Pulsar version
dnl --------------------
VERSION="0.1.1"

dnl Checks for programs
dnl -------------------
CFLAGS="$CFLAGS"
AC_PROG_CC
AC_PROG_INSTALL

dnl Checks for libraries
dnl --------------------

dnl Checks for header files
dnl -----------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(shadow.h crypt.h)

dnl Checks for typedefs
dnl -------------------

dnl Checks for structures
dnl ---------------------

dnl Checks for compiler characteristics
dnl -----------------------------------

dnl Checks for library functions
dnl ----------------------------
AC_CHECK_LIB(crypt, crypt)

dnl Checks for system services
dnl --------------------------

dnl ********************************************************
dnl * --with-mysql                                         *
dnl ********************************************************
AC_ARG_WITH(
	mysql,
        [  --with-mysql            Enable MySQL support.],
        [ 
          case "$with_mysql" in
          no)
          	;;
          yes)
          	;;
          *)
          	if test -d $with_mysql; then
                	MYSQL_LDFLAGS="-L$with_mysql"
                	MYSQL_LIBS="-lmysqlclient"
                else
                	MYSQL_LIBS="$with_mysql"
                fi
          	with_mysql=yes
          	;;
          esac
        ],
        [
        	MYSQL_LDFLAGS="-L/usr/lib/mysql"
        	with_mysql=yes
        ]
)
if test "$with_mysql" = "yes"; then
	if test -z "$MYSQL_LIBS"; then
		MYSQL_LIBS="-lmysqlclient"
	fi
        old_LIBS=$LIBS
        old_LDFLAGS=$LDFLAGS
	LIBS="$LIBS $MYSQL_LIBS"
        LDFLAGS="$LDFLAGS $MYSQL_LDFLAGS"
        AC_TRY_LINK(
        	[
                	#include <mysql/mysql.h>
                        #ifndef NULL
                        #define NULL 0
                        #endif
                ],
                [	
                	MYSQL *conn = mysql_init(NULL);
                        mysql_close(conn);
                ],
        	[
	        	AC_DEFINE(WITH_MYSQL)
                        chk_mysql=yes
	        ],
                [
                	LIBS=$old_LIBS
                        LDFLAGS=$old_LDFLAGS
			AC_MSG_RESULT([MySQL library not found, support disabled])
                ]
        )
fi

dnl ********************************************************
dnl ********************************************************
dnl * --with-pam                                           *
dnl ********************************************************
AC_ARG_WITH(
	pam,
        [  --with-pam              Enable PAM support.],
        [ case "$with_pam" in
          no)
          	;;
          yes)
          	;;
          *)
          	if test -d $with_pam; then
                	PAM_LDFLAGS="-L$with_pam"
                	PAM_LIBS="-lpam"
                else
                	PAM_LIBS="$with_pam"
                fi
          	with_pam=yes
          	;;
          esac
        ],
        [
        	with_pam=yes
        ]
)
if test "$with_pam" = "yes"; then
	if test -z "$PAM_LIBS"; then
		PAM_LIBS="-lpam"
	fi
        old_LIBS=$LIBS
        old_LDFLAGS=$LDFLAGS
	LIBS="$LIBS $PAM_LIBS"
        LDFLAGS="$LDFLAGS $PAM_LDFLAGS"
	AC_CHECK_LIB(pam, pam_start,
        	[
	        	AC_DEFINE(WITH_PAM)
                        chk_pam=yes
	        ],
                [
                	LIBS=$old_LIBS
                        LDFLAGS=$old_LDFLAGS
			AC_MSG_RESULT([PAM library not found, support disabled])
                ]
        )
fi

dnl ********************************************************
dnl ********************************************************
dnl * --with-tcp_wrappers                                  *
dnl ********************************************************
AC_ARG_WITH(
	tcp_wrappers,
        [  --with-tcp_wrappers     Enable tcp wrappers support.],
        [ case "$with_tcp_wrappers" in
          no)
          	;;
          yes)
          	;;
          *)
          	if test -d $with_tcp_wrappers; then
                	TCP_WRAPPERS_LDFLAGS="-L$with_tcp_wrappers"
                	TCP_WRAPPERS_LIBS="-lwrap"
                else
                	TCP_WRAPPERS_LIBS="$with_tcp_wrappers"
                fi
		with_tcp_wrappers=yes
          	;;
          esac
        ],
        [
        	with_tcp_wrappers=yes
        ]
)
if test "$with_tcp_wrappers" = "yes"; then
	if test -z "$TCP_WRAPPERS_LIBS"; then
		TCP_WRAPPERS_LIBS="-lwrap"
	fi
        old_LIBS=$LIBS
        old_LDFLAGS=$LDFLAGS
	LIBS="$LIBS $TCP_WRAPPERS_LIBS"
        LDFLAGS="$LDFLAGS $TCP_WRAPPERS_LDFLAGS"
	AC_CHECK_LIB(wrap, request_init,
        	[
	        	AC_DEFINE(WITH_TCP_WRAPPERS)
		        AC_CHECK_LIB(nsl, yp_get_default_domain,
	                	[
                        		LIBS="$LIBS -lnsl"
                        	]
                        )
                        chk_tcp_wrappers=yes
	        ],
                [
                	LIBS=$old_LIBS
                        LDFLAGS=$old_LDFLAGS
			AC_MSG_RESULT([tcp wrappers library not found, support disabled])
                ]
        )
fi
dnl ********************************************************
dnl ********************************************************
dnl * --enable-debug                                       *
dnl ********************************************************
AC_ARG_ENABLE(
	debug,
        [  --enable-debug          Enable assertion checks and disable optimizations.],
        [
        ],
        [ enable_debug=no
        ]
)
if test "$enable_debug" = "no"; then
	AC_DEFINE(NDEBUG)
	CFLAGS="$CFLAGS -O3"
else
	AC_DEFINE(DEBUG)
	CFLAGS="$CFLAGS -O0 -g"
	chk_debug=yes
fi
dnl ********************************************************
dnl ********************************************************
dnl * --with-mailstore_buffer_size                         *
dnl ********************************************************
AC_ARG_WITH(
	mailstore_buffer_size,
        [  --with-mailstore_buffer_size
                          Set the size of readahead buffer for the mailstore code (in KiB == 1024).
                          Valid values are from 4 to 128.
        ],
        [
        	if test $with_mailstore_buffer_size -lt 4 -o\
                	$with_mailstore_buffer_size -gt 128
                then
	                AC_MSG_RESULT(Invalid parameter to mailstore_buffer_size. Default will be used.)
        	        with_mailstore_buffer_size=4
                fi
	],
        [
        	with_mailstore_buffer_size=4
        ]
)
AC_DEFINE_UNQUOTED(defMailstoreBufSize,($with_mailstore_buffer_size*1024))
dnl ********************************************************
dnl ********************************************************
dnl * --with-ssl                                           *
dnl ********************************************************
AC_ARG_WITH(
	ssl,
        [  --with-ssl     Enable OpenSSL support.],
        [ case "$with_ssl" in
          no)
          	;;
          yes)
          	;;
          *)
          	if test -d $with_ssl; then
                	SSL_LDFLAGS="-L$with_ssl"
                	SSL_LIBS="-lssl"
                else
                	SSL_LIBS="$with_ssl"
                fi
		with_ssl=yes
          	;;
          esac
        ],
        [
        	with_ssl=yes
        ]
)
if test "$with_ssl" = "yes"; then
	if test -z "$SSL_LIBS"; then
		SSL_LIBS="-lssl"
	fi
        old_LIBS=$LIBS
        old_LDFLAGS=$LDFLAGS
	LIBS="$LIBS $SSL_LIBS"
        LDFLAGS="$LDFLAGS $SSL_LDFLAGS"
	AC_CHECK_LIB(ssl, SSL_library_init,
        	[
                        chk_ssl=yes
	        ],
                [
                	LIBS=$old_LIBS
                        LDFLAGS=$old_LDFLAGS
			AC_MSG_RESULT([OpenSSL library not found, support disabled])
                ]
        )
fi
dnl *** Test if OpenSSL needs /usr/kerberos/include in include path ***
if test "$chk_ssl" = "yes"; then
	AC_TRY_COMPILE(
        	[
			#include <stdlib.h>
			#include <openssl/ssl.h>
                ],
                [
                	int rc;
			rc = init_ssl();
			if(-1 == rc) {
                        	exit(-1);
			}
                        exit(0);
                ],
        	[
	        	AC_DEFINE(WITH_SSL)
	        ],
                [
                	chk_ssl_krb=yes
                ]
        )
fi
if test "$chk_ssl_krb" = "yes"; then
	old_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS -I/usr/kerberos/include"
	AC_TRY_COMPILE(
        	[
			#include <stdlib.h>
			#include <openssl/ssl.h>
                ],
                [
                	int rc;
			rc = init_ssl();
			if(-1 == rc) {
                        	exit(-1);
			}
                        exit(0);
                ],
        	[
	        	AC_DEFINE(WITH_SSL)
	        ],
                [
                	CFLAGS=$old_CFLAGS
			AC_MSG_RESULT([OpenSSL library found, but compile test fails])
                ]
        )
fi
dnl ********************************************************
dnl ********************************************************
dnl Output a list of included optional components
AC_MSG_RESULT([-----------------------------------])
if test "$chk_pam" = "yes"; then
	AC_MSG_RESULT([PAM           ENABLED])
else
	AC_MSG_RESULT([PAM           disabled])
fi
if test "$chk_mysql" = "yes"; then
	AC_MSG_RESULT([MySQL         ENABLED])
else
	AC_MSG_RESULT([MySQL         disabled])
fi
if test "$chk_ssl" = "yes"; then
	AC_MSG_RESULT([OpenSSL       ENABLED])
else
	AC_MSG_RESULT([OpenSSL       disabled])
fi
if test "$chk_tcp_wrappers" = "yes"; then
	AC_MSG_RESULT([TCP WRAPPERS  ENABLED])
else
	AC_MSG_RESULT([TCP WRAPPERS  disabled])
fi
if test "$chk_debug" = "yes"; then
	AC_MSG_RESULT([Debugging     ENABLED])
else
	AC_MSG_RESULT([Debugging     disabled])
fi
AC_MSG_RESULT(Mailbox readahead buffer set to: "$with_mailstore_buffer_size"KiB ("$with_mailstore_buffer_size"*1024 bytes))
AC_MSG_RESULT([-----------------------------------])

dnl ********************************************************
dnl ********************************************************
dnl Fix manpath to be FHS/RedHat conformant
if test "${prefix}" = "NONE"; then
	prefix="/usr/local"
fi
if test "${prefix}" = "/usr" -o "${prefix}" = "/usr/local"; then
	mandir=${prefix}/share/man
	docdir=${prefix}/share/doc/pulsar-${VERSION}
else
	mandir=${prefix}/man
	docdir=${prefix}/doc/pulsar-${VERSION}
fi
sbindir=${prefix}/sbin
AC_MSG_RESULT([Executables will go in:   ] ${prefix}/sbin)
AC_MSG_RESULT([Manuals will go in:       ] $mandir)
AC_MSG_RESULT([Doc and misc files go in: ] $docdir)
AC_MSG_RESULT([-----------------------------------])

dnl ********************************************************
AC_SUBST(VERSION)
AC_SUBST(CFLAGS)
AC_SUBST(docdir)
AC_CONFIG_HEADER(./src/config.h)
AC_OUTPUT(
	./man/Makefile
	./doc/Makefile
	./support_files/Makefile
	./support_files/pulsar.epm
	./support_files/pulsar.init
	./support_files/pulsar.xinetd
	./src/Makefile
	./src/version.h
        ./src/cfg/Makefile
        ./src/md5/Makefile
        ./src/util/Makefile
        ./src/users/Makefile
        ./src/mailstore/Makefile
)
